# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateVcSchemaDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'version': 'str',
        'contexts': 'list[str]',
        'description': 'str',
        'is_badge_schema': 'bool',
        'file_id': 'str',
        'prop_array': 'list[VcSchemaProperty]'
    }

    attribute_map = {
        'title': 'title',
        'version': 'version',
        'contexts': 'contexts',
        'description': 'description',
        'is_badge_schema': 'isBadgeSchema',
        'file_id': 'fileId',
        'prop_array': 'propArray'
    }

    def __init__(self, title=None, version=None, contexts=None, description=None, is_badge_schema=None, file_id=None, prop_array=None):  # noqa: E501
        """CreateVcSchemaDto - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._version = None
        self._contexts = None
        self._description = None
        self._is_badge_schema = None
        self._file_id = None
        self._prop_array = None
        self.discriminator = None
        self.title = title
        self.version = version
        if contexts is not None:
            self.contexts = contexts
        if description is not None:
            self.description = description
        self.is_badge_schema = is_badge_schema
        self.file_id = file_id
        self.prop_array = prop_array

    @property
    def title(self):
        """Gets the title of this CreateVcSchemaDto.  # noqa: E501

        (必須) 新規生成するVCスキーマのタイトル  # noqa: E501

        :return: The title of this CreateVcSchemaDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateVcSchemaDto.

        (必須) 新規生成するVCスキーマのタイトル  # noqa: E501

        :param title: The title of this CreateVcSchemaDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def version(self):
        """Gets the version of this CreateVcSchemaDto.  # noqa: E501

        (必須) VCスキーマのバージョン(デフォルト: 1.0.0)  # noqa: E501

        :return: The version of this CreateVcSchemaDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateVcSchemaDto.

        (必須) VCスキーマのバージョン(デフォルト: 1.0.0)  # noqa: E501

        :param version: The version of this CreateVcSchemaDto.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def contexts(self):
        """Gets the contexts of this CreateVcSchemaDto.  # noqa: E501

        (任意) VCスキーマに設定する@context文字列の配列  # noqa: E501

        :return: The contexts of this CreateVcSchemaDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this CreateVcSchemaDto.

        (任意) VCスキーマに設定する@context文字列の配列  # noqa: E501

        :param contexts: The contexts of this CreateVcSchemaDto.  # noqa: E501
        :type: list[str]
        """

        self._contexts = contexts

    @property
    def description(self):
        """Gets the description of this CreateVcSchemaDto.  # noqa: E501

        (任意) VCスキーマの説明文  # noqa: E501

        :return: The description of this CreateVcSchemaDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateVcSchemaDto.

        (任意) VCスキーマの説明文  # noqa: E501

        :param description: The description of this CreateVcSchemaDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_badge_schema(self):
        """Gets the is_badge_schema of this CreateVcSchemaDto.  # noqa: E501

        (任意) このスキーマがバッジのスキーマか否か(デフォルト: false)  # noqa: E501

        :return: The is_badge_schema of this CreateVcSchemaDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_badge_schema

    @is_badge_schema.setter
    def is_badge_schema(self, is_badge_schema):
        """Sets the is_badge_schema of this CreateVcSchemaDto.

        (任意) このスキーマがバッジのスキーマか否か(デフォルト: false)  # noqa: E501

        :param is_badge_schema: The is_badge_schema of this CreateVcSchemaDto.  # noqa: E501
        :type: bool
        """
        if is_badge_schema is None:
            raise ValueError("Invalid value for `is_badge_schema`, must not be `None`")  # noqa: E501

        self._is_badge_schema = is_badge_schema

    @property
    def file_id(self):
        """Gets the file_id of this CreateVcSchemaDto.  # noqa: E501

        (任意) バッジの画像のファイル識別子。'`isBadgeSchema`プロパティが`true`であり、バッジスキーマとして利用する場合は必須のパラメータ。  # noqa: E501

        :return: The file_id of this CreateVcSchemaDto.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this CreateVcSchemaDto.

        (任意) バッジの画像のファイル識別子。'`isBadgeSchema`プロパティが`true`であり、バッジスキーマとして利用する場合は必須のパラメータ。  # noqa: E501

        :param file_id: The file_id of this CreateVcSchemaDto.  # noqa: E501
        :type: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def prop_array(self):
        """Gets the prop_array of this CreateVcSchemaDto.  # noqa: E501

        (必須) VCのスキーマの各項目における項目名と項目型のオブジェクトの配列  # noqa: E501

        :return: The prop_array of this CreateVcSchemaDto.  # noqa: E501
        :rtype: list[VcSchemaProperty]
        """
        return self._prop_array

    @prop_array.setter
    def prop_array(self, prop_array):
        """Sets the prop_array of this CreateVcSchemaDto.

        (必須) VCのスキーマの各項目における項目名と項目型のオブジェクトの配列  # noqa: E501

        :param prop_array: The prop_array of this CreateVcSchemaDto.  # noqa: E501
        :type: list[VcSchemaProperty]
        """
        if prop_array is None:
            raise ValueError("Invalid value for `prop_array`, must not be `None`")  # noqa: E501

        self._prop_array = prop_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVcSchemaDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVcSchemaDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
