# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Badge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'filename': 'str',
        'description': 'str',
        'status': 'float',
        'vc_schema': 'AllOfBadgeVcSchema',
        'vc_info': 'AllOfBadgeVcInfo',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'filename': 'filename',
        'description': 'description',
        'status': 'status',
        'vc_schema': 'vcSchema',
        'vc_info': 'vcInfo',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, label=None, filename=None, description=None, status=None, vc_schema=None, vc_info=None, created_at=None, updated_at=None):  # noqa: E501
        """Badge - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._label = None
        self._filename = None
        self._description = None
        self._status = None
        self._vc_schema = None
        self._vc_info = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        if label is not None:
            self.label = label
        if filename is not None:
            self.filename = filename
        self.description = description
        self.status = status
        if vc_schema is not None:
            self.vc_schema = vc_schema
        if vc_info is not None:
            self.vc_info = vc_info
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Badge.  # noqa: E501

        (必須) バッジの識別子  # noqa: E501

        :return: The id of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Badge.

        (必須) バッジの識別子  # noqa: E501

        :param id: The id of this Badge.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this Badge.  # noqa: E501

        (任意) バッジのラベル名  # noqa: E501

        :return: The label of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Badge.

        (任意) バッジのラベル名  # noqa: E501

        :param label: The label of this Badge.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def filename(self):
        """Gets the filename of this Badge.  # noqa: E501

        (任意) バッジのファイル名  # noqa: E501

        :return: The filename of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Badge.

        (任意) バッジのファイル名  # noqa: E501

        :param filename: The filename of this Badge.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def description(self):
        """Gets the description of this Badge.  # noqa: E501

        (任意) バッジの作成目的や用途など任意で設定可能な説明文  # noqa: E501

        :return: The description of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Badge.

        (任意) バッジの作成目的や用途など任意で設定可能な説明文  # noqa: E501

        :param description: The description of this Badge.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def status(self):
        """Gets the status of this Badge.  # noqa: E501

        (必須) バッジの状態(1: アクティブ, 0: 停止中)  # noqa: E501

        :return: The status of this Badge.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Badge.

        (必須) バッジの状態(1: アクティブ, 0: 停止中)  # noqa: E501

        :param status: The status of this Badge.  # noqa: E501
        :type: float
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def vc_schema(self):
        """Gets the vc_schema of this Badge.  # noqa: E501

        (任意) バッジに紐付いたVCスキーマ  # noqa: E501

        :return: The vc_schema of this Badge.  # noqa: E501
        :rtype: AllOfBadgeVcSchema
        """
        return self._vc_schema

    @vc_schema.setter
    def vc_schema(self, vc_schema):
        """Sets the vc_schema of this Badge.

        (任意) バッジに紐付いたVCスキーマ  # noqa: E501

        :param vc_schema: The vc_schema of this Badge.  # noqa: E501
        :type: AllOfBadgeVcSchema
        """

        self._vc_schema = vc_schema

    @property
    def vc_info(self):
        """Gets the vc_info of this Badge.  # noqa: E501

        (任意) バッジに紐付き、メタデータとなるVC情報  # noqa: E501

        :return: The vc_info of this Badge.  # noqa: E501
        :rtype: AllOfBadgeVcInfo
        """
        return self._vc_info

    @vc_info.setter
    def vc_info(self, vc_info):
        """Sets the vc_info of this Badge.

        (任意) バッジに紐付き、メタデータとなるVC情報  # noqa: E501

        :param vc_info: The vc_info of this Badge.  # noqa: E501
        :type: AllOfBadgeVcInfo
        """

        self._vc_info = vc_info

    @property
    def created_at(self):
        """Gets the created_at of this Badge.  # noqa: E501

        (必須) グループの作成日時  # noqa: E501

        :return: The created_at of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Badge.

        (必須) グループの作成日時  # noqa: E501

        :param created_at: The created_at of this Badge.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Badge.  # noqa: E501

        (必須) グループの最終更新日時  # noqa: E501

        :return: The updated_at of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Badge.

        (必須) グループの最終更新日時  # noqa: E501

        :param updated_at: The updated_at of this Badge.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Badge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Badge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
