# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResolveDidResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'list[str]',
        'id': 'str',
        'verification_method': 'list[object]',
        'assertion_method': 'list[str]',
        'authentication': 'list[str]',
        'capability_invocation': 'list[str]',
        'capability_delegation': 'list[str]',
        'key_agreement': 'list[str]'
    }

    attribute_map = {
        'context': 'context',
        'id': 'id',
        'verification_method': 'verificationMethod',
        'assertion_method': 'assertionMethod',
        'authentication': 'authentication',
        'capability_invocation': 'capabilityInvocation',
        'capability_delegation': 'capabilityDelegation',
        'key_agreement': 'keyAgreement'
    }

    def __init__(self, context=None, id=None, verification_method=None, assertion_method=None, authentication=None, capability_invocation=None, capability_delegation=None, key_agreement=None):  # noqa: E501
        """ResolveDidResponseDto - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._verification_method = None
        self._assertion_method = None
        self._authentication = None
        self._capability_invocation = None
        self._capability_delegation = None
        self._key_agreement = None
        self.discriminator = None
        self.context = context
        self.id = id
        self.verification_method = verification_method
        self.assertion_method = assertion_method
        self.authentication = authentication
        self.capability_invocation = capability_invocation
        self.capability_delegation = capability_delegation
        self.key_agreement = key_agreement

    @property
    def context(self):
        """Gets the context of this ResolveDidResponseDto.  # noqa: E501


        :return: The context of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ResolveDidResponseDto.


        :param context: The context of this ResolveDidResponseDto.  # noqa: E501
        :type: list[str]
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def id(self):
        """Gets the id of this ResolveDidResponseDto.  # noqa: E501


        :return: The id of this ResolveDidResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResolveDidResponseDto.


        :param id: The id of this ResolveDidResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def verification_method(self):
        """Gets the verification_method of this ResolveDidResponseDto.  # noqa: E501


        :return: The verification_method of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._verification_method

    @verification_method.setter
    def verification_method(self, verification_method):
        """Sets the verification_method of this ResolveDidResponseDto.


        :param verification_method: The verification_method of this ResolveDidResponseDto.  # noqa: E501
        :type: list[object]
        """
        if verification_method is None:
            raise ValueError("Invalid value for `verification_method`, must not be `None`")  # noqa: E501

        self._verification_method = verification_method

    @property
    def assertion_method(self):
        """Gets the assertion_method of this ResolveDidResponseDto.  # noqa: E501


        :return: The assertion_method of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._assertion_method

    @assertion_method.setter
    def assertion_method(self, assertion_method):
        """Sets the assertion_method of this ResolveDidResponseDto.


        :param assertion_method: The assertion_method of this ResolveDidResponseDto.  # noqa: E501
        :type: list[str]
        """
        if assertion_method is None:
            raise ValueError("Invalid value for `assertion_method`, must not be `None`")  # noqa: E501

        self._assertion_method = assertion_method

    @property
    def authentication(self):
        """Gets the authentication of this ResolveDidResponseDto.  # noqa: E501


        :return: The authentication of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ResolveDidResponseDto.


        :param authentication: The authentication of this ResolveDidResponseDto.  # noqa: E501
        :type: list[str]
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def capability_invocation(self):
        """Gets the capability_invocation of this ResolveDidResponseDto.  # noqa: E501


        :return: The capability_invocation of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._capability_invocation

    @capability_invocation.setter
    def capability_invocation(self, capability_invocation):
        """Sets the capability_invocation of this ResolveDidResponseDto.


        :param capability_invocation: The capability_invocation of this ResolveDidResponseDto.  # noqa: E501
        :type: list[str]
        """
        if capability_invocation is None:
            raise ValueError("Invalid value for `capability_invocation`, must not be `None`")  # noqa: E501

        self._capability_invocation = capability_invocation

    @property
    def capability_delegation(self):
        """Gets the capability_delegation of this ResolveDidResponseDto.  # noqa: E501


        :return: The capability_delegation of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._capability_delegation

    @capability_delegation.setter
    def capability_delegation(self, capability_delegation):
        """Sets the capability_delegation of this ResolveDidResponseDto.


        :param capability_delegation: The capability_delegation of this ResolveDidResponseDto.  # noqa: E501
        :type: list[str]
        """
        if capability_delegation is None:
            raise ValueError("Invalid value for `capability_delegation`, must not be `None`")  # noqa: E501

        self._capability_delegation = capability_delegation

    @property
    def key_agreement(self):
        """Gets the key_agreement of this ResolveDidResponseDto.  # noqa: E501


        :return: The key_agreement of this ResolveDidResponseDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_agreement

    @key_agreement.setter
    def key_agreement(self, key_agreement):
        """Sets the key_agreement of this ResolveDidResponseDto.


        :param key_agreement: The key_agreement of this ResolveDidResponseDto.  # noqa: E501
        :type: list[str]
        """
        if key_agreement is None:
            raise ValueError("Invalid value for `key_agreement`, must not be `None`")  # noqa: E501

        self._key_agreement = key_agreement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResolveDidResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResolveDidResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
