# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VpInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'hash': 'str',
        'description': 'str',
        'raw': 'str',
        'created_by': 'AllOfVpInfoCreatedBy',
        'user': 'AllOfVpInfoUser',
        'vc_infos': 'list[VcInfo]',
        'groups': 'list[Group]',
        'did_info': 'AllOfVpInfoDidInfo',
        'verifications': 'list[Verification]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'hash': 'hash',
        'description': 'description',
        'raw': 'raw',
        'created_by': 'createdBy',
        'user': 'user',
        'vc_infos': 'vcInfos',
        'groups': 'groups',
        'did_info': 'didInfo',
        'verifications': 'verifications',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, label=None, hash=None, description=None, raw=None, created_by=None, user=None, vc_infos=None, groups=None, did_info=None, verifications=None, created_at=None, updated_at=None):  # noqa: E501
        """VpInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._label = None
        self._hash = None
        self._description = None
        self._raw = None
        self._created_by = None
        self._user = None
        self._vc_infos = None
        self._groups = None
        self._did_info = None
        self._verifications = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        if label is not None:
            self.label = label
        if hash is not None:
            self.hash = hash
        if description is not None:
            self.description = description
        self.raw = raw
        self.created_by = created_by
        if user is not None:
            self.user = user
        if vc_infos is not None:
            self.vc_infos = vc_infos
        if groups is not None:
            self.groups = groups
        if did_info is not None:
            self.did_info = did_info
        if verifications is not None:
            self.verifications = verifications
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this VpInfo.  # noqa: E501

        (必須) VP情報の識別子  # noqa: E501

        :return: The id of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VpInfo.

        (必須) VP情報の識別子  # noqa: E501

        :param id: The id of this VpInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this VpInfo.  # noqa: E501

        (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ  # noqa: E501

        :return: The label of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this VpInfo.

        (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ  # noqa: E501

        :param label: The label of this VpInfo.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def hash(self):
        """Gets the hash of this VpInfo.  # noqa: E501

        (必須) VPのハッシュ値。VPの保管における識別子として用いる。  # noqa: E501

        :return: The hash of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this VpInfo.

        (必須) VPのハッシュ値。VPの保管における識別子として用いる。  # noqa: E501

        :param hash: The hash of this VpInfo.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def description(self):
        """Gets the description of this VpInfo.  # noqa: E501

        (任意) VCの発行目的や用途など任意で設定可能な説明文。  # noqa: E501

        :return: The description of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VpInfo.

        (任意) VCの発行目的や用途など任意で設定可能な説明文。  # noqa: E501

        :param description: The description of this VpInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def raw(self):
        """Gets the raw of this VpInfo.  # noqa: E501

        (必須) VPのバイナリデータ  # noqa: E501

        :return: The raw of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this VpInfo.

        (必須) VPのバイナリデータ  # noqa: E501

        :param raw: The raw of this VpInfo.  # noqa: E501
        :type: str
        """
        if raw is None:
            raise ValueError("Invalid value for `raw`, must not be `None`")  # noqa: E501

        self._raw = raw

    @property
    def created_by(self):
        """Gets the created_by of this VpInfo.  # noqa: E501

        (任意) VP情報を生成したユーザーアカウント  # noqa: E501

        :return: The created_by of this VpInfo.  # noqa: E501
        :rtype: AllOfVpInfoCreatedBy
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VpInfo.

        (任意) VP情報を生成したユーザーアカウント  # noqa: E501

        :param created_by: The created_by of this VpInfo.  # noqa: E501
        :type: AllOfVpInfoCreatedBy
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def user(self):
        """Gets the user of this VpInfo.  # noqa: E501

        (任意) VP情報と紐付いたアカウント  # noqa: E501

        :return: The user of this VpInfo.  # noqa: E501
        :rtype: AllOfVpInfoUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VpInfo.

        (任意) VP情報と紐付いたアカウント  # noqa: E501

        :param user: The user of this VpInfo.  # noqa: E501
        :type: AllOfVpInfoUser
        """

        self._user = user

    @property
    def vc_infos(self):
        """Gets the vc_infos of this VpInfo.  # noqa: E501

        (任意) VPを生成する元となるVC情報  # noqa: E501

        :return: The vc_infos of this VpInfo.  # noqa: E501
        :rtype: list[VcInfo]
        """
        return self._vc_infos

    @vc_infos.setter
    def vc_infos(self, vc_infos):
        """Sets the vc_infos of this VpInfo.

        (任意) VPを生成する元となるVC情報  # noqa: E501

        :param vc_infos: The vc_infos of this VpInfo.  # noqa: E501
        :type: list[VcInfo]
        """

        self._vc_infos = vc_infos

    @property
    def groups(self):
        """Gets the groups of this VpInfo.  # noqa: E501

        (任意) VP情報に紐づいたグループの配列  # noqa: E501

        :return: The groups of this VpInfo.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this VpInfo.

        (任意) VP情報に紐づいたグループの配列  # noqa: E501

        :param groups: The groups of this VpInfo.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def did_info(self):
        """Gets the did_info of this VpInfo.  # noqa: E501

        (任意) VP生成時の署名に用いるDID情報の識別子  # noqa: E501

        :return: The did_info of this VpInfo.  # noqa: E501
        :rtype: AllOfVpInfoDidInfo
        """
        return self._did_info

    @did_info.setter
    def did_info(self, did_info):
        """Sets the did_info of this VpInfo.

        (任意) VP生成時の署名に用いるDID情報の識別子  # noqa: E501

        :param did_info: The did_info of this VpInfo.  # noqa: E501
        :type: AllOfVpInfoDidInfo
        """

        self._did_info = did_info

    @property
    def verifications(self):
        """Gets the verifications of this VpInfo.  # noqa: E501

        (任意) VPの検証結果  # noqa: E501

        :return: The verifications of this VpInfo.  # noqa: E501
        :rtype: list[Verification]
        """
        return self._verifications

    @verifications.setter
    def verifications(self, verifications):
        """Sets the verifications of this VpInfo.

        (任意) VPの検証結果  # noqa: E501

        :param verifications: The verifications of this VpInfo.  # noqa: E501
        :type: list[Verification]
        """

        self._verifications = verifications

    @property
    def created_at(self):
        """Gets the created_at of this VpInfo.  # noqa: E501

        (必須) VP情報の作成日時  # noqa: E501

        :return: The created_at of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VpInfo.

        (必須) VP情報の作成日時  # noqa: E501

        :param created_at: The created_at of this VpInfo.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VpInfo.  # noqa: E501

        (必須) VP情報の更新日時  # noqa: E501

        :return: The updated_at of this VpInfo.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VpInfo.

        (必須) VP情報の更新日時  # noqa: E501

        :param updated_at: The updated_at of this VpInfo.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
