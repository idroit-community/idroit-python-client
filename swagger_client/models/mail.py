# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Mail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'content': 'str',
        'for_every_user': 'bool',
        'for_every_client': 'bool',
        'users': 'list[User]',
        'groups': 'list[Group]',
        'created_by': 'list[User]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'content': 'content',
        'for_every_user': 'forEveryUser',
        'for_every_client': 'forEveryClient',
        'users': 'users',
        'groups': 'groups',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, title=None, content=None, for_every_user=None, for_every_client=None, users=None, groups=None, created_by=None, created_at=None, updated_at=None):  # noqa: E501
        """Mail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._content = None
        self._for_every_user = None
        self._for_every_client = None
        self._users = None
        self._groups = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.title = title
        self.content = content
        self.for_every_user = for_every_user
        self.for_every_client = for_every_client
        if users is not None:
            self.users = users
        if groups is not None:
            self.groups = groups
        if created_by is not None:
            self.created_by = created_by
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Mail.  # noqa: E501

        (必須) 送信済みメールの識別子  # noqa: E501

        :return: The id of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Mail.

        (必須) 送信済みメールの識別子  # noqa: E501

        :param id: The id of this Mail.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Mail.  # noqa: E501

        (必須) 送信済みメールの件名  # noqa: E501

        :return: The title of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Mail.

        (必須) 送信済みメールの件名  # noqa: E501

        :param title: The title of this Mail.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this Mail.  # noqa: E501

        (必須) 送信済みメールの内容  # noqa: E501

        :return: The content of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Mail.

        (必須) 送信済みメールの内容  # noqa: E501

        :param content: The content of this Mail.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def for_every_user(self):
        """Gets the for_every_user of this Mail.  # noqa: E501

        (必須) 全てのuser権限アカウントに対して送信するか。(true: 全てのuser権限アカウントに送信, false: 全てのuser権限アカウントに送信しない)  # noqa: E501

        :return: The for_every_user of this Mail.  # noqa: E501
        :rtype: bool
        """
        return self._for_every_user

    @for_every_user.setter
    def for_every_user(self, for_every_user):
        """Sets the for_every_user of this Mail.

        (必須) 全てのuser権限アカウントに対して送信するか。(true: 全てのuser権限アカウントに送信, false: 全てのuser権限アカウントに送信しない)  # noqa: E501

        :param for_every_user: The for_every_user of this Mail.  # noqa: E501
        :type: bool
        """
        if for_every_user is None:
            raise ValueError("Invalid value for `for_every_user`, must not be `None`")  # noqa: E501

        self._for_every_user = for_every_user

    @property
    def for_every_client(self):
        """Gets the for_every_client of this Mail.  # noqa: E501

        (必須) 全てのclient権限アカウントに対して送信するか。(true: 全てのclient権限アカウントに送信, false: 全てのclient権限アカウントに送信しない)  # noqa: E501

        :return: The for_every_client of this Mail.  # noqa: E501
        :rtype: bool
        """
        return self._for_every_client

    @for_every_client.setter
    def for_every_client(self, for_every_client):
        """Sets the for_every_client of this Mail.

        (必須) 全てのclient権限アカウントに対して送信するか。(true: 全てのclient権限アカウントに送信, false: 全てのclient権限アカウントに送信しない)  # noqa: E501

        :param for_every_client: The for_every_client of this Mail.  # noqa: E501
        :type: bool
        """
        if for_every_client is None:
            raise ValueError("Invalid value for `for_every_client`, must not be `None`")  # noqa: E501

        self._for_every_client = for_every_client

    @property
    def users(self):
        """Gets the users of this Mail.  # noqa: E501

        (任意) メールの送信先となるユーザーアカウントの配列  # noqa: E501

        :return: The users of this Mail.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Mail.

        (任意) メールの送信先となるユーザーアカウントの配列  # noqa: E501

        :param users: The users of this Mail.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    @property
    def groups(self):
        """Gets the groups of this Mail.  # noqa: E501

        (任意) メールの送信先となるグループの配列  # noqa: E501

        :return: The groups of this Mail.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Mail.

        (任意) メールの送信先となるグループの配列  # noqa: E501

        :param groups: The groups of this Mail.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def created_by(self):
        """Gets the created_by of this Mail.  # noqa: E501

        (必須) メール送信操作を行ったAdmin権限アカウント  # noqa: E501

        :return: The created_by of this Mail.  # noqa: E501
        :rtype: list[User]
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Mail.

        (必須) メール送信操作を行ったAdmin権限アカウント  # noqa: E501

        :param created_by: The created_by of this Mail.  # noqa: E501
        :type: list[User]
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this Mail.  # noqa: E501

        (必須) メールの送信日時  # noqa: E501

        :return: The created_at of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Mail.

        (必須) メールの送信日時  # noqa: E501

        :param created_at: The created_at of this Mail.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Mail.  # noqa: E501

        (必須) メールの送信日時  # noqa: E501

        :return: The updated_at of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Mail.

        (必須) メールの送信日時  # noqa: E501

        :param updated_at: The updated_at of this Mail.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
