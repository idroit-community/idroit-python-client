# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VcSchemaResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'version': 'str',
        'description': 'str',
        'is_badge_schema': 'str',
        'vc_infos': 'list[VcInfo]',
        'vc_contexts': 'list[VcContext]',
        'vc_schema_properties': 'list[VcSchemaProperty]',
        'groups': 'list[Group]',
        'badges': 'list[Badge]',
        'file': 'AllOfVcSchemaResponseDtoFile',
        'created_by': 'AllOfVcSchemaResponseDtoCreatedBy',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'version': 'version',
        'description': 'description',
        'is_badge_schema': 'isBadgeSchema',
        'vc_infos': 'vcInfos',
        'vc_contexts': 'vcContexts',
        'vc_schema_properties': 'vcSchemaProperties',
        'groups': 'groups',
        'badges': 'badges',
        'file': 'file',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, title=None, version=None, description=None, is_badge_schema=None, vc_infos=None, vc_contexts=None, vc_schema_properties=None, groups=None, badges=None, file=None, created_by=None, created_at=None, updated_at=None):  # noqa: E501
        """VcSchemaResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._version = None
        self._description = None
        self._is_badge_schema = None
        self._vc_infos = None
        self._vc_contexts = None
        self._vc_schema_properties = None
        self._groups = None
        self._badges = None
        self._file = None
        self._created_by = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.title = title
        self.version = version
        self.description = description
        self.is_badge_schema = is_badge_schema
        self.vc_infos = vc_infos
        self.vc_contexts = vc_contexts
        self.vc_schema_properties = vc_schema_properties
        self.groups = groups
        self.badges = badges
        self.file = file
        self.created_by = created_by
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマの識別子  # noqa: E501

        :return: The id of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VcSchemaResponseDto.

        VCスキーマの識別子  # noqa: E501

        :param id: The id of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマのタイトル  # noqa: E501

        :return: The title of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VcSchemaResponseDto.

        VCスキーマのタイトル  # noqa: E501

        :param title: The title of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def version(self):
        """Gets the version of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマのバージョン  # noqa: E501

        :return: The version of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VcSchemaResponseDto.

        VCスキーマのバージョン  # noqa: E501

        :param version: The version of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def description(self):
        """Gets the description of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマの説明文  # noqa: E501

        :return: The description of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VcSchemaResponseDto.

        VCスキーマの説明文  # noqa: E501

        :param description: The description of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def is_badge_schema(self):
        """Gets the is_badge_schema of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマがバッジのスキーマか否か  # noqa: E501

        :return: The is_badge_schema of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._is_badge_schema

    @is_badge_schema.setter
    def is_badge_schema(self, is_badge_schema):
        """Sets the is_badge_schema of this VcSchemaResponseDto.

        VCスキーマがバッジのスキーマか否か  # noqa: E501

        :param is_badge_schema: The is_badge_schema of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if is_badge_schema is None:
            raise ValueError("Invalid value for `is_badge_schema`, must not be `None`")  # noqa: E501

        self._is_badge_schema = is_badge_schema

    @property
    def vc_infos(self):
        """Gets the vc_infos of this VcSchemaResponseDto.  # noqa: E501


        :return: The vc_infos of this VcSchemaResponseDto.  # noqa: E501
        :rtype: list[VcInfo]
        """
        return self._vc_infos

    @vc_infos.setter
    def vc_infos(self, vc_infos):
        """Sets the vc_infos of this VcSchemaResponseDto.


        :param vc_infos: The vc_infos of this VcSchemaResponseDto.  # noqa: E501
        :type: list[VcInfo]
        """
        if vc_infos is None:
            raise ValueError("Invalid value for `vc_infos`, must not be `None`")  # noqa: E501

        self._vc_infos = vc_infos

    @property
    def vc_contexts(self):
        """Gets the vc_contexts of this VcSchemaResponseDto.  # noqa: E501

        VCのスキーマのJSONスキーマコンテキスト  # noqa: E501

        :return: The vc_contexts of this VcSchemaResponseDto.  # noqa: E501
        :rtype: list[VcContext]
        """
        return self._vc_contexts

    @vc_contexts.setter
    def vc_contexts(self, vc_contexts):
        """Sets the vc_contexts of this VcSchemaResponseDto.

        VCのスキーマのJSONスキーマコンテキスト  # noqa: E501

        :param vc_contexts: The vc_contexts of this VcSchemaResponseDto.  # noqa: E501
        :type: list[VcContext]
        """
        if vc_contexts is None:
            raise ValueError("Invalid value for `vc_contexts`, must not be `None`")  # noqa: E501

        self._vc_contexts = vc_contexts

    @property
    def vc_schema_properties(self):
        """Gets the vc_schema_properties of this VcSchemaResponseDto.  # noqa: E501

        VCのスキーマの各項目における項目名と項目型のオブジェクトの配列  # noqa: E501

        :return: The vc_schema_properties of this VcSchemaResponseDto.  # noqa: E501
        :rtype: list[VcSchemaProperty]
        """
        return self._vc_schema_properties

    @vc_schema_properties.setter
    def vc_schema_properties(self, vc_schema_properties):
        """Sets the vc_schema_properties of this VcSchemaResponseDto.

        VCのスキーマの各項目における項目名と項目型のオブジェクトの配列  # noqa: E501

        :param vc_schema_properties: The vc_schema_properties of this VcSchemaResponseDto.  # noqa: E501
        :type: list[VcSchemaProperty]
        """
        if vc_schema_properties is None:
            raise ValueError("Invalid value for `vc_schema_properties`, must not be `None`")  # noqa: E501

        self._vc_schema_properties = vc_schema_properties

    @property
    def groups(self):
        """Gets the groups of this VcSchemaResponseDto.  # noqa: E501


        :return: The groups of this VcSchemaResponseDto.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this VcSchemaResponseDto.


        :param groups: The groups of this VcSchemaResponseDto.  # noqa: E501
        :type: list[Group]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")  # noqa: E501

        self._groups = groups

    @property
    def badges(self):
        """Gets the badges of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマを紐付けたバッジ  # noqa: E501

        :return: The badges of this VcSchemaResponseDto.  # noqa: E501
        :rtype: list[Badge]
        """
        return self._badges

    @badges.setter
    def badges(self, badges):
        """Sets the badges of this VcSchemaResponseDto.

        VCスキーマを紐付けたバッジ  # noqa: E501

        :param badges: The badges of this VcSchemaResponseDto.  # noqa: E501
        :type: list[Badge]
        """
        if badges is None:
            raise ValueError("Invalid value for `badges`, must not be `None`")  # noqa: E501

        self._badges = badges

    @property
    def file(self):
        """Gets the file of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマに紐付けるバッジ用の画像。`isBadgeSchema`プロパティが`true`の場合必須。  # noqa: E501

        :return: The file of this VcSchemaResponseDto.  # noqa: E501
        :rtype: AllOfVcSchemaResponseDtoFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this VcSchemaResponseDto.

        VCスキーマに紐付けるバッジ用の画像。`isBadgeSchema`プロパティが`true`の場合必須。  # noqa: E501

        :param file: The file of this VcSchemaResponseDto.  # noqa: E501
        :type: AllOfVcSchemaResponseDtoFile
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def created_by(self):
        """Gets the created_by of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマを作成したユーザーアカウント  # noqa: E501

        :return: The created_by of this VcSchemaResponseDto.  # noqa: E501
        :rtype: AllOfVcSchemaResponseDtoCreatedBy
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VcSchemaResponseDto.

        VCスキーマを作成したユーザーアカウント  # noqa: E501

        :param created_by: The created_by of this VcSchemaResponseDto.  # noqa: E501
        :type: AllOfVcSchemaResponseDtoCreatedBy
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマの作成日時  # noqa: E501

        :return: The created_at of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VcSchemaResponseDto.

        VCスキーマの作成日時  # noqa: E501

        :param created_at: The created_at of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VcSchemaResponseDto.  # noqa: E501

        VCスキーマの最終更新日時  # noqa: E501

        :return: The updated_at of this VcSchemaResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VcSchemaResponseDto.

        VCスキーマの最終更新日時  # noqa: E501

        :param updated_at: The updated_at of this VcSchemaResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VcSchemaResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VcSchemaResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
