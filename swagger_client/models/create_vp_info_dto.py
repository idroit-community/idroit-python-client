# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateVpInfoDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vc_info_ids': 'list[str]',
        'did_info_id': 'str',
        'label': 'str',
        'description': 'str'
    }

    attribute_map = {
        'vc_info_ids': 'vcInfoIds',
        'did_info_id': 'didInfoId',
        'label': 'label',
        'description': 'description'
    }

    def __init__(self, vc_info_ids=None, did_info_id=None, label=None, description=None):  # noqa: E501
        """CreateVpInfoDto - a model defined in Swagger"""  # noqa: E501
        self._vc_info_ids = None
        self._did_info_id = None
        self._label = None
        self._description = None
        self.discriminator = None
        self.vc_info_ids = vc_info_ids
        self.did_info_id = did_info_id
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description

    @property
    def vc_info_ids(self):
        """Gets the vc_info_ids of this CreateVpInfoDto.  # noqa: E501

        (必須) VPを生成する元となるVC情報の識別子の配列  # noqa: E501

        :return: The vc_info_ids of this CreateVpInfoDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._vc_info_ids

    @vc_info_ids.setter
    def vc_info_ids(self, vc_info_ids):
        """Sets the vc_info_ids of this CreateVpInfoDto.

        (必須) VPを生成する元となるVC情報の識別子の配列  # noqa: E501

        :param vc_info_ids: The vc_info_ids of this CreateVpInfoDto.  # noqa: E501
        :type: list[str]
        """
        if vc_info_ids is None:
            raise ValueError("Invalid value for `vc_info_ids`, must not be `None`")  # noqa: E501

        self._vc_info_ids = vc_info_ids

    @property
    def did_info_id(self):
        """Gets the did_info_id of this CreateVpInfoDto.  # noqa: E501

        (必須) VP生成時の署名に用いるDID情報の識別子  # noqa: E501

        :return: The did_info_id of this CreateVpInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._did_info_id

    @did_info_id.setter
    def did_info_id(self, did_info_id):
        """Sets the did_info_id of this CreateVpInfoDto.

        (必須) VP生成時の署名に用いるDID情報の識別子  # noqa: E501

        :param did_info_id: The did_info_id of this CreateVpInfoDto.  # noqa: E501
        :type: str
        """
        if did_info_id is None:
            raise ValueError("Invalid value for `did_info_id`, must not be `None`")  # noqa: E501

        self._did_info_id = did_info_id

    @property
    def label(self):
        """Gets the label of this CreateVpInfoDto.  # noqa: E501

        (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)  # noqa: E501

        :return: The label of this CreateVpInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreateVpInfoDto.

        (任意) VPの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: vc-for-project1)  # noqa: E501

        :param label: The label of this CreateVpInfoDto.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this CreateVpInfoDto.  # noqa: E501

        (任意) VPの生成目的や用途などを任意で設定可能な説明文  # noqa: E501

        :return: The description of this CreateVpInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateVpInfoDto.

        (任意) VPの生成目的や用途などを任意で設定可能な説明文  # noqa: E501

        :param description: The description of this CreateVpInfoDto.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVpInfoDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVpInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
