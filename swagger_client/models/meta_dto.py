# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetaDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_items': 'float',
        'item_count': 'float',
        'items_per_page': 'float',
        'total_pages': 'float',
        'current_page': 'float'
    }

    attribute_map = {
        'total_items': 'totalItems',
        'item_count': 'itemCount',
        'items_per_page': 'itemsPerPage',
        'total_pages': 'totalPages',
        'current_page': 'currentPage'
    }

    def __init__(self, total_items=None, item_count=None, items_per_page=None, total_pages=None, current_page=None):  # noqa: E501
        """MetaDto - a model defined in Swagger"""  # noqa: E501
        self._total_items = None
        self._item_count = None
        self._items_per_page = None
        self._total_pages = None
        self._current_page = None
        self.discriminator = None
        self.total_items = total_items
        self.item_count = item_count
        self.items_per_page = items_per_page
        self.total_pages = total_pages
        self.current_page = current_page

    @property
    def total_items(self):
        """Gets the total_items of this MetaDto.  # noqa: E501

        Total number of items  # noqa: E501

        :return: The total_items of this MetaDto.  # noqa: E501
        :rtype: float
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this MetaDto.

        Total number of items  # noqa: E501

        :param total_items: The total_items of this MetaDto.  # noqa: E501
        :type: float
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")  # noqa: E501

        self._total_items = total_items

    @property
    def item_count(self):
        """Gets the item_count of this MetaDto.  # noqa: E501

        Number of items on the current page  # noqa: E501

        :return: The item_count of this MetaDto.  # noqa: E501
        :rtype: float
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this MetaDto.

        Number of items on the current page  # noqa: E501

        :param item_count: The item_count of this MetaDto.  # noqa: E501
        :type: float
        """
        if item_count is None:
            raise ValueError("Invalid value for `item_count`, must not be `None`")  # noqa: E501

        self._item_count = item_count

    @property
    def items_per_page(self):
        """Gets the items_per_page of this MetaDto.  # noqa: E501

        Number of items per page  # noqa: E501

        :return: The items_per_page of this MetaDto.  # noqa: E501
        :rtype: float
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this MetaDto.

        Number of items per page  # noqa: E501

        :param items_per_page: The items_per_page of this MetaDto.  # noqa: E501
        :type: float
        """
        if items_per_page is None:
            raise ValueError("Invalid value for `items_per_page`, must not be `None`")  # noqa: E501

        self._items_per_page = items_per_page

    @property
    def total_pages(self):
        """Gets the total_pages of this MetaDto.  # noqa: E501

        Total number of pages  # noqa: E501

        :return: The total_pages of this MetaDto.  # noqa: E501
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this MetaDto.

        Total number of pages  # noqa: E501

        :param total_pages: The total_pages of this MetaDto.  # noqa: E501
        :type: float
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages

    @property
    def current_page(self):
        """Gets the current_page of this MetaDto.  # noqa: E501

        Current page number  # noqa: E501

        :return: The current_page of this MetaDto.  # noqa: E501
        :rtype: float
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this MetaDto.

        Current page number  # noqa: E501

        :param current_page: The current_page of this MetaDto.  # noqa: E501
        :type: float
        """
        if current_page is None:
            raise ValueError("Invalid value for `current_page`, must not be `None`")  # noqa: E501

        self._current_page = current_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetaDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
