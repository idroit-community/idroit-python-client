# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProfileResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'name': 'str',
        'email': 'str',
        'role': 'str',
        'iat': 'float',
        'exp': 'float'
    }

    attribute_map = {
        'user_id': 'userId',
        'name': 'name',
        'email': 'email',
        'role': 'role',
        'iat': 'iat',
        'exp': 'exp'
    }

    def __init__(self, user_id=None, name=None, email=None, role=None, iat=None, exp=None):  # noqa: E501
        """GetProfileResponseDto - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._name = None
        self._email = None
        self._role = None
        self._iat = None
        self._exp = None
        self.discriminator = None
        self.user_id = user_id
        self.name = name
        self.email = email
        self.role = role
        self.iat = iat
        self.exp = exp

    @property
    def user_id(self):
        """Gets the user_id of this GetProfileResponseDto.  # noqa: E501

        アカウントの識別子  # noqa: E501

        :return: The user_id of this GetProfileResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetProfileResponseDto.

        アカウントの識別子  # noqa: E501

        :param user_id: The user_id of this GetProfileResponseDto.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this GetProfileResponseDto.  # noqa: E501

        アカウントの名前  # noqa: E501

        :return: The name of this GetProfileResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetProfileResponseDto.

        アカウントの名前  # noqa: E501

        :param name: The name of this GetProfileResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this GetProfileResponseDto.  # noqa: E501

        アカウントのメールアドレス  # noqa: E501

        :return: The email of this GetProfileResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetProfileResponseDto.

        アカウントのメールアドレス  # noqa: E501

        :param email: The email of this GetProfileResponseDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this GetProfileResponseDto.  # noqa: E501

        アカウントロール(\"admin\", \"user\", \"client\")  # noqa: E501

        :return: The role of this GetProfileResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GetProfileResponseDto.

        アカウントロール(\"admin\", \"user\", \"client\")  # noqa: E501

        :param role: The role of this GetProfileResponseDto.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["admin", "user", "client"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def iat(self):
        """Gets the iat of this GetProfileResponseDto.  # noqa: E501

        JWTが発行された日時  # noqa: E501

        :return: The iat of this GetProfileResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._iat

    @iat.setter
    def iat(self, iat):
        """Sets the iat of this GetProfileResponseDto.

        JWTが発行された日時  # noqa: E501

        :param iat: The iat of this GetProfileResponseDto.  # noqa: E501
        :type: float
        """
        if iat is None:
            raise ValueError("Invalid value for `iat`, must not be `None`")  # noqa: E501

        self._iat = iat

    @property
    def exp(self):
        """Gets the exp of this GetProfileResponseDto.  # noqa: E501

        JWTが失効する日時  # noqa: E501

        :return: The exp of this GetProfileResponseDto.  # noqa: E501
        :rtype: float
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this GetProfileResponseDto.

        JWTが失効する日時  # noqa: E501

        :param exp: The exp of this GetProfileResponseDto.  # noqa: E501
        :type: float
        """
        if exp is None:
            raise ValueError("Invalid value for `exp`, must not be `None`")  # noqa: E501

        self._exp = exp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProfileResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProfileResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
