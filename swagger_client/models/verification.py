# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Verification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'result': 'bool',
        'created_by': 'AllOfVerificationCreatedBy',
        'vc_info': 'AllOfVerificationVcInfo',
        'vp_info': 'AllOfVerificationVpInfo',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'result': 'result',
        'created_by': 'createdBy',
        'vc_info': 'vcInfo',
        'vp_info': 'vpInfo',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, label=None, result=None, created_by=None, vc_info=None, vp_info=None, created_at=None, updated_at=None):  # noqa: E501
        """Verification - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._label = None
        self._result = None
        self._created_by = None
        self._vc_info = None
        self._vp_info = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.label = label
        self.result = result
        self.created_by = created_by
        if vc_info is not None:
            self.vc_info = vc_info
        if vp_info is not None:
            self.vp_info = vp_info
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Verification.  # noqa: E501

        (必須) 検証結果の識別子  # noqa: E501

        :return: The id of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Verification.

        (必須) 検証結果の識別子  # noqa: E501

        :param id: The id of this Verification.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this Verification.  # noqa: E501

        (必須) 検証結果の識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: verify-for-check)  # noqa: E501

        :return: The label of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Verification.

        (必須) 検証結果の識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: verify-for-check)  # noqa: E501

        :param label: The label of this Verification.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def result(self):
        """Gets the result of this Verification.  # noqa: E501

        (必須) VC/VPの検証結果(true: 検証に成功, false: 検証に失敗)  # noqa: E501

        :return: The result of this Verification.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Verification.

        (必須) VC/VPの検証結果(true: 検証に成功, false: 検証に失敗)  # noqa: E501

        :param result: The result of this Verification.  # noqa: E501
        :type: bool
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def created_by(self):
        """Gets the created_by of this Verification.  # noqa: E501

        (任意) 検証結果を作成したユーザーアカウント  # noqa: E501

        :return: The created_by of this Verification.  # noqa: E501
        :rtype: AllOfVerificationCreatedBy
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Verification.

        (任意) 検証結果を作成したユーザーアカウント  # noqa: E501

        :param created_by: The created_by of this Verification.  # noqa: E501
        :type: AllOfVerificationCreatedBy
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def vc_info(self):
        """Gets the vc_info of this Verification.  # noqa: E501

        (任意) 検証を実行したVC情報の識別子  # noqa: E501

        :return: The vc_info of this Verification.  # noqa: E501
        :rtype: AllOfVerificationVcInfo
        """
        return self._vc_info

    @vc_info.setter
    def vc_info(self, vc_info):
        """Sets the vc_info of this Verification.

        (任意) 検証を実行したVC情報の識別子  # noqa: E501

        :param vc_info: The vc_info of this Verification.  # noqa: E501
        :type: AllOfVerificationVcInfo
        """

        self._vc_info = vc_info

    @property
    def vp_info(self):
        """Gets the vp_info of this Verification.  # noqa: E501

        (任意) 検証を実行したVP情報の識別子  # noqa: E501

        :return: The vp_info of this Verification.  # noqa: E501
        :rtype: AllOfVerificationVpInfo
        """
        return self._vp_info

    @vp_info.setter
    def vp_info(self, vp_info):
        """Sets the vp_info of this Verification.

        (任意) 検証を実行したVP情報の識別子  # noqa: E501

        :param vp_info: The vp_info of this Verification.  # noqa: E501
        :type: AllOfVerificationVpInfo
        """

        self._vp_info = vp_info

    @property
    def created_at(self):
        """Gets the created_at of this Verification.  # noqa: E501

        (必須) 検証実行時の日時  # noqa: E501

        :return: The created_at of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Verification.

        (必須) 検証実行時の日時  # noqa: E501

        :param created_at: The created_at of this Verification.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Verification.  # noqa: E501

        (必須) 検証結果の最終更新日  # noqa: E501

        :return: The updated_at of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Verification.

        (必須) 検証結果の最終更新日  # noqa: E501

        :param updated_at: The updated_at of this Verification.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Verification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Verification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
