# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendMailBatchDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'for_every_client': 'bool',
        'for_every_user': 'bool',
        'user_ids': 'list[str]',
        'group_ids': 'list[str]',
        'content': 'str'
    }

    attribute_map = {
        'title': 'title',
        'for_every_client': 'forEveryClient',
        'for_every_user': 'forEveryUser',
        'user_ids': 'userIds',
        'group_ids': 'groupIds',
        'content': 'content'
    }

    def __init__(self, title=None, for_every_client=None, for_every_user=None, user_ids=None, group_ids=None, content=None):  # noqa: E501
        """SendMailBatchDto - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._for_every_client = None
        self._for_every_user = None
        self._user_ids = None
        self._group_ids = None
        self._content = None
        self.discriminator = None
        self.title = title
        self.for_every_client = for_every_client
        self.for_every_user = for_every_user
        if user_ids is not None:
            self.user_ids = user_ids
        if group_ids is not None:
            self.group_ids = group_ids
        self.content = content

    @property
    def title(self):
        """Gets the title of this SendMailBatchDto.  # noqa: E501

        (必須) メールの件名  # noqa: E501

        :return: The title of this SendMailBatchDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SendMailBatchDto.

        (必須) メールの件名  # noqa: E501

        :param title: The title of this SendMailBatchDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def for_every_client(self):
        """Gets the for_every_client of this SendMailBatchDto.  # noqa: E501

        (必須) 全てのクライアントアカウントに対して送信するか (true: 全てのクライアントアカウントに送信, false: 全てのクライアントアカウントに送信しない)  # noqa: E501

        :return: The for_every_client of this SendMailBatchDto.  # noqa: E501
        :rtype: bool
        """
        return self._for_every_client

    @for_every_client.setter
    def for_every_client(self, for_every_client):
        """Sets the for_every_client of this SendMailBatchDto.

        (必須) 全てのクライアントアカウントに対して送信するか (true: 全てのクライアントアカウントに送信, false: 全てのクライアントアカウントに送信しない)  # noqa: E501

        :param for_every_client: The for_every_client of this SendMailBatchDto.  # noqa: E501
        :type: bool
        """
        if for_every_client is None:
            raise ValueError("Invalid value for `for_every_client`, must not be `None`")  # noqa: E501

        self._for_every_client = for_every_client

    @property
    def for_every_user(self):
        """Gets the for_every_user of this SendMailBatchDto.  # noqa: E501

        (必須) 全てのユーザーアカウントに対して送信するか (true: 全てのユーザーアカウントに送信, false: 全てのユーザーアカウントに送信しない)  # noqa: E501

        :return: The for_every_user of this SendMailBatchDto.  # noqa: E501
        :rtype: bool
        """
        return self._for_every_user

    @for_every_user.setter
    def for_every_user(self, for_every_user):
        """Sets the for_every_user of this SendMailBatchDto.

        (必須) 全てのユーザーアカウントに対して送信するか (true: 全てのユーザーアカウントに送信, false: 全てのユーザーアカウントに送信しない)  # noqa: E501

        :param for_every_user: The for_every_user of this SendMailBatchDto.  # noqa: E501
        :type: bool
        """
        if for_every_user is None:
            raise ValueError("Invalid value for `for_every_user`, must not be `None`")  # noqa: E501

        self._for_every_user = for_every_user

    @property
    def user_ids(self):
        """Gets the user_ids of this SendMailBatchDto.  # noqa: E501

        (任意) メールの送信対象のユーザーアカウント識別子の配列  # noqa: E501

        :return: The user_ids of this SendMailBatchDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this SendMailBatchDto.

        (任意) メールの送信対象のユーザーアカウント識別子の配列  # noqa: E501

        :param user_ids: The user_ids of this SendMailBatchDto.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    @property
    def group_ids(self):
        """Gets the group_ids of this SendMailBatchDto.  # noqa: E501

        (任意) 送信対象のグループ識別子の配列。グループを指定した場合グループに紐付くユーザーアカウントとクライアントアカウント全てにメールが送信される  # noqa: E501

        :return: The group_ids of this SendMailBatchDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this SendMailBatchDto.

        (任意) 送信対象のグループ識別子の配列。グループを指定した場合グループに紐付くユーザーアカウントとクライアントアカウント全てにメールが送信される  # noqa: E501

        :param group_ids: The group_ids of this SendMailBatchDto.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def content(self):
        """Gets the content of this SendMailBatchDto.  # noqa: E501

        (必須) メールの内容  # noqa: E501

        :return: The content of this SendMailBatchDto.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SendMailBatchDto.

        (必須) メールの内容  # noqa: E501

        :param content: The content of this SendMailBatchDto.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendMailBatchDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendMailBatchDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
