# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first': 'str',
        'previous': 'object',
        'next': 'str',
        'last': 'str'
    }

    attribute_map = {
        'first': 'first',
        'previous': 'previous',
        'next': 'next',
        'last': 'last'
    }

    def __init__(self, first=None, previous=None, next=None, last=None):  # noqa: E501
        """LinkDto - a model defined in Swagger"""  # noqa: E501
        self._first = None
        self._previous = None
        self._next = None
        self._last = None
        self.discriminator = None
        self.first = first
        self.previous = previous
        self.next = next
        self.last = last

    @property
    def first(self):
        """Gets the first of this LinkDto.  # noqa: E501

        URL for the first page  # noqa: E501

        :return: The first of this LinkDto.  # noqa: E501
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this LinkDto.

        URL for the first page  # noqa: E501

        :param first: The first of this LinkDto.  # noqa: E501
        :type: str
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def previous(self):
        """Gets the previous of this LinkDto.  # noqa: E501

        URL for the previous page  # noqa: E501

        :return: The previous of this LinkDto.  # noqa: E501
        :rtype: object
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this LinkDto.

        URL for the previous page  # noqa: E501

        :param previous: The previous of this LinkDto.  # noqa: E501
        :type: object
        """
        if previous is None:
            raise ValueError("Invalid value for `previous`, must not be `None`")  # noqa: E501

        self._previous = previous

    @property
    def next(self):
        """Gets the next of this LinkDto.  # noqa: E501

        URL for the next page  # noqa: E501

        :return: The next of this LinkDto.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this LinkDto.

        URL for the next page  # noqa: E501

        :param next: The next of this LinkDto.  # noqa: E501
        :type: str
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")  # noqa: E501

        self._next = next

    @property
    def last(self):
        """Gets the last of this LinkDto.  # noqa: E501

        URL for the last page  # noqa: E501

        :return: The last of this LinkDto.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this LinkDto.

        URL for the last page  # noqa: E501

        :param last: The last of this LinkDto.  # noqa: E501
        :type: str
        """
        if last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")  # noqa: E501

        self._last = last

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
