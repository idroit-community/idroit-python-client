# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateUserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'password': 'str',
        'role': 'str',
        'need_activate_flow': 'bool',
        'group_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'password': 'password',
        'role': 'role',
        'need_activate_flow': 'needActivateFlow',
        'group_ids': 'groupIds'
    }

    def __init__(self, name=None, email=None, password=None, role=None, need_activate_flow=None, group_ids=None):  # noqa: E501
        """CreateUserDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._email = None
        self._password = None
        self._role = None
        self._need_activate_flow = None
        self._group_ids = None
        self.discriminator = None
        self.name = name
        self.email = email
        if password is not None:
            self.password = password
        self.role = role
        if need_activate_flow is not None:
            self.need_activate_flow = need_activate_flow
        if group_ids is not None:
            self.group_ids = group_ids

    @property
    def name(self):
        """Gets the name of this CreateUserDto.  # noqa: E501

        (必須) ユーザーアカウントの名前  # noqa: E501

        :return: The name of this CreateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUserDto.

        (必須) ユーザーアカウントの名前  # noqa: E501

        :param name: The name of this CreateUserDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this CreateUserDto.  # noqa: E501

        (必須) ユーザーアカウントのメールアドレス  # noqa: E501

        :return: The email of this CreateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserDto.

        (必須) ユーザーアカウントのメールアドレス  # noqa: E501

        :param email: The email of this CreateUserDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this CreateUserDto.  # noqa: E501

        (任意) ユーザーアカウントのパスワード(8文字以上20字未満)。\"needActivateFlow\"が\"false\"の場合は必須。  # noqa: E501

        :return: The password of this CreateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateUserDto.

        (任意) ユーザーアカウントのパスワード(8文字以上20字未満)。\"needActivateFlow\"が\"false\"の場合は必須。  # noqa: E501

        :param password: The password of this CreateUserDto.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def role(self):
        """Gets the role of this CreateUserDto.  # noqa: E501

        (必須) アカウントのタイプ  # noqa: E501

        :return: The role of this CreateUserDto.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateUserDto.

        (必須) アカウントのタイプ  # noqa: E501

        :param role: The role of this CreateUserDto.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def need_activate_flow(self):
        """Gets the need_activate_flow of this CreateUserDto.  # noqa: E501

        (任意) アカウントの有効化フローが必要か否か。デフォルト値ではfalse。(true: 必要 /false: 不要)  # noqa: E501

        :return: The need_activate_flow of this CreateUserDto.  # noqa: E501
        :rtype: bool
        """
        return self._need_activate_flow

    @need_activate_flow.setter
    def need_activate_flow(self, need_activate_flow):
        """Sets the need_activate_flow of this CreateUserDto.

        (任意) アカウントの有効化フローが必要か否か。デフォルト値ではfalse。(true: 必要 /false: 不要)  # noqa: E501

        :param need_activate_flow: The need_activate_flow of this CreateUserDto.  # noqa: E501
        :type: bool
        """

        self._need_activate_flow = need_activate_flow

    @property
    def group_ids(self):
        """Gets the group_ids of this CreateUserDto.  # noqa: E501

        (任意) ユーザーアカウントに紐付けるグループのIDの配列  # noqa: E501

        :return: The group_ids of this CreateUserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this CreateUserDto.

        (任意) ユーザーアカウントに紐付けるグループのIDの配列  # noqa: E501

        :param group_ids: The group_ids of this CreateUserDto.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
