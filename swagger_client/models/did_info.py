# coding: utf-8

"""
    iDroit Dashboard Admin API

         これは[株式会社フォアー](https://www.fore-co.ltd/ja/)が開発するを使ったDecentralizd Identifiers / Verifiable Credentials(DID/VC)に関係する機能を簡単に利用するための REST API です。現在以下のユースケースをサポートしています。これは今後も拡張されていきます。     - DIDの生成:      - グループ管理機能       - (企業/プロジェクトのまとまり)ごとにユーザー、クライアント、証明書(VC)スキーマを紐付けて管理する。          詳細は以下を参照してください。     - [idroit dashboard admin UI](https://admin.idroit-dashboard.com)     - [idroit dashboard公式ホームページ]()     - [idroit dashboard操作マニュアル]()      以下は関連リンクです。     - [Universal Resolver](https://dev.uniresolver.io/)     - [W3C DID Core 1.0](https://www.w3.org/TR/did-core/)     - [Verifiable Credentials Data Model v2.0](https://www.w3.org/TR/vc-data-model-2.0/)     # noqa: E501

    OpenAPI spec version: 0.9.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DidInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'manage_uuid': 'str',
        'did': 'str',
        'method': 'str',
        'label': 'str',
        'domain_name': 'str',
        'exist_private_key': 'bool',
        'description': 'str',
        'user': 'AllOfDidInfoUser',
        'created_by': 'AllOfDidInfoCreatedBy',
        'vp_infos': 'AllOfDidInfoVpInfos',
        'groups': 'list[Group]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'manage_uuid': 'manageUuid',
        'did': 'did',
        'method': 'method',
        'label': 'label',
        'domain_name': 'domainName',
        'exist_private_key': 'existPrivateKey',
        'description': 'description',
        'user': 'user',
        'created_by': 'createdBy',
        'vp_infos': 'vpInfos',
        'groups': 'groups',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, manage_uuid=None, did=None, method=None, label=None, domain_name=None, exist_private_key=None, description=None, user=None, created_by=None, vp_infos=None, groups=None, created_at=None, updated_at=None):  # noqa: E501
        """DidInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._manage_uuid = None
        self._did = None
        self._method = None
        self._label = None
        self._domain_name = None
        self._exist_private_key = None
        self._description = None
        self._user = None
        self._created_by = None
        self._vp_infos = None
        self._groups = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.manage_uuid = manage_uuid
        self.did = did
        self.method = method
        self.label = label
        self.domain_name = domain_name
        self.exist_private_key = exist_private_key
        self.description = description
        if user is not None:
            self.user = user
        self.created_by = created_by
        if vp_infos is not None:
            self.vp_infos = vp_infos
        if groups is not None:
            self.groups = groups
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this DidInfo.  # noqa: E501

        (必須) DID情報の識別子  # noqa: E501

        :return: The id of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DidInfo.

        (必須) DID情報の識別子  # noqa: E501

        :param id: The id of this DidInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def manage_uuid(self):
        """Gets the manage_uuid of this DidInfo.  # noqa: E501

        (必須) DID情報の管理に用いるユニークな識別子  # noqa: E501

        :return: The manage_uuid of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._manage_uuid

    @manage_uuid.setter
    def manage_uuid(self, manage_uuid):
        """Sets the manage_uuid of this DidInfo.

        (必須) DID情報の管理に用いるユニークな識別子  # noqa: E501

        :param manage_uuid: The manage_uuid of this DidInfo.  # noqa: E501
        :type: str
        """
        if manage_uuid is None:
            raise ValueError("Invalid value for `manage_uuid`, must not be `None`")  # noqa: E501

        self._manage_uuid = manage_uuid

    @property
    def did(self):
        """Gets the did of this DidInfo.  # noqa: E501

        (必須) DID  # noqa: E501

        :return: The did of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._did

    @did.setter
    def did(self, did):
        """Sets the did of this DidInfo.

        (必須) DID  # noqa: E501

        :param did: The did of this DidInfo.  # noqa: E501
        :type: str
        """
        if did is None:
            raise ValueError("Invalid value for `did`, must not be `None`")  # noqa: E501

        self._did = did

    @property
    def method(self):
        """Gets the method of this DidInfo.  # noqa: E501

        (必須) DIDメソッド  # noqa: E501

        :return: The method of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DidInfo.

        (必須) DIDメソッド  # noqa: E501

        :param method: The method of this DidInfo.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["key", "web", "ethr", "ethr:arbitrum:goerli", "ethr:sepolia"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def label(self):
        """Gets the label of this DidInfo.  # noqa: E501

        (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)  # noqa: E501

        :return: The label of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DidInfo.

        (任意) DIDの識別や整理などの管理するにあったてメタデータとして任意で設定可能な単語のフレーズ。(例: did-for-project1)  # noqa: E501

        :param label: The label of this DidInfo.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def domain_name(self):
        """Gets the domain_name of this DidInfo.  # noqa: E501

        (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないカラムである。  # noqa: E501

        :return: The domain_name of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DidInfo.

        (任意) did:webメソッドでDIDを生成する際に必要なドメイン名。DIDによって指定されたドメインがドメインネームシステム(DNS)を通じて解決されるときのホスト名。did:webメソッド以外では必要のないカラムである。  # noqa: E501

        :param domain_name: The domain_name of this DidInfo.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def exist_private_key(self):
        """Gets the exist_private_key of this DidInfo.  # noqa: E501

        (必須) DID情報に紐付いた秘密鍵を本アプリケーションで保管しているか否か  # noqa: E501

        :return: The exist_private_key of this DidInfo.  # noqa: E501
        :rtype: bool
        """
        return self._exist_private_key

    @exist_private_key.setter
    def exist_private_key(self, exist_private_key):
        """Sets the exist_private_key of this DidInfo.

        (必須) DID情報に紐付いた秘密鍵を本アプリケーションで保管しているか否か  # noqa: E501

        :param exist_private_key: The exist_private_key of this DidInfo.  # noqa: E501
        :type: bool
        """
        if exist_private_key is None:
            raise ValueError("Invalid value for `exist_private_key`, must not be `None`")  # noqa: E501

        self._exist_private_key = exist_private_key

    @property
    def description(self):
        """Gets the description of this DidInfo.  # noqa: E501

        (任意) DID情報の生成目的や用途など任意で設定可能な説明文  # noqa: E501

        :return: The description of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DidInfo.

        (任意) DID情報の生成目的や用途など任意で設定可能な説明文  # noqa: E501

        :param description: The description of this DidInfo.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def user(self):
        """Gets the user of this DidInfo.  # noqa: E501

        (任意) DID情報に紐付いたアカウントの配列  # noqa: E501

        :return: The user of this DidInfo.  # noqa: E501
        :rtype: AllOfDidInfoUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DidInfo.

        (任意) DID情報に紐付いたアカウントの配列  # noqa: E501

        :param user: The user of this DidInfo.  # noqa: E501
        :type: AllOfDidInfoUser
        """

        self._user = user

    @property
    def created_by(self):
        """Gets the created_by of this DidInfo.  # noqa: E501

        (任意) DIDを生成したユーザーアカウント  # noqa: E501

        :return: The created_by of this DidInfo.  # noqa: E501
        :rtype: AllOfDidInfoCreatedBy
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DidInfo.

        (任意) DIDを生成したユーザーアカウント  # noqa: E501

        :param created_by: The created_by of this DidInfo.  # noqa: E501
        :type: AllOfDidInfoCreatedBy
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def vp_infos(self):
        """Gets the vp_infos of this DidInfo.  # noqa: E501

        (任意) 生成時に署名にDIDを用いたVP情報  # noqa: E501

        :return: The vp_infos of this DidInfo.  # noqa: E501
        :rtype: AllOfDidInfoVpInfos
        """
        return self._vp_infos

    @vp_infos.setter
    def vp_infos(self, vp_infos):
        """Sets the vp_infos of this DidInfo.

        (任意) 生成時に署名にDIDを用いたVP情報  # noqa: E501

        :param vp_infos: The vp_infos of this DidInfo.  # noqa: E501
        :type: AllOfDidInfoVpInfos
        """

        self._vp_infos = vp_infos

    @property
    def groups(self):
        """Gets the groups of this DidInfo.  # noqa: E501

        (任意) DID情報に紐づいたグループの配列  # noqa: E501

        :return: The groups of this DidInfo.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DidInfo.

        (任意) DID情報に紐づいたグループの配列  # noqa: E501

        :param groups: The groups of this DidInfo.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def created_at(self):
        """Gets the created_at of this DidInfo.  # noqa: E501

        (必須) DID情報の作成日時  # noqa: E501

        :return: The created_at of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DidInfo.

        (必須) DID情報の作成日時  # noqa: E501

        :param created_at: The created_at of this DidInfo.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DidInfo.  # noqa: E501

        (必須) DID情報の最終更新  # noqa: E501

        :return: The updated_at of this DidInfo.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DidInfo.

        (必須) DID情報の最終更新  # noqa: E501

        :param updated_at: The updated_at of this DidInfo.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DidInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DidInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
